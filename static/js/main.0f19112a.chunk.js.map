{"version":3,"sources":["images/black_pawn.svg","images/white_pawn.svg","images/black_bishop.svg","images/black_knight.svg","images/black_rook.svg","images/white_bishop.svg","images/white_knight.svg","images/white_rook.svg","images/black_queen.svg","images/black_king.svg","images/white_queen.svg","images/white_king.svg","components/BoardCell.js","components/Board.js","components/Chess.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoardCell","pieces","row","col","selectedCell","setSelectedCell","updatePiece","pieceInPosition","undefined","pieceKey","piece","pieceInCell","pieceInSelectedCell","isPieceSelected","key","cellStyle","imageInCell","src","image","className","onClick","Board","numRows","numColumns","useState","board","Array","fill","map","r","_","c","rows","cols","standardChessPieces","WhiteRook","WhiteKnight","WhiteBishop","WhiteQueen","WhiteKing","WhitePawn","BlackRook","BlackKnight","BlackBishop","BlackQueen","BlackKing","BlackPawn","Chess","setPieces","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f19112a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black_pawn.1c52d8c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_pawn.d69014fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_bishop.1f3b8d1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_knight.d39f1d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_rook.96872a66.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_bishop.09004fd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_knight.e6294efe.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_rook.095b1a06.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_queen.7b3e33e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_king.66e1bcad.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_queen.4320a2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_king.250510ff.svg\";","import React from 'react'\r\n\r\nimport './BoardCell.scss';\r\n\r\nconst BoardCell = ({pieces, row, col, selectedCell, setSelectedCell, updatePiece}) => {\r\n\r\n    const pieceInPosition = (row, col) => {\r\n        if (row === undefined || col === undefined)\r\n            return undefined;\r\n        for (let pieceKey in pieces) {\r\n            let piece = pieces[pieceKey];\r\n            if (piece.col === col && piece.row === row)\r\n                return piece;\r\n        }\r\n    };\r\n\r\n    const pieceInCell = pieceInPosition(row, col);\r\n    const pieceInSelectedCell = pieceInPosition(...selectedCell);\r\n    const isPieceSelected = pieceInCell && pieceInSelectedCell && pieceInCell.key === pieceInSelectedCell.key;\r\n\r\n    const cellStyle = \"cell \" + (row%2 === col%2 ? 'black-cell' : 'white-cell') +\r\n        (isPieceSelected? ' highlighted' : '');\r\n\r\n    const onSelected = () => {\r\n        if (isPieceSelected) {\r\n            setSelectedCell([]);\r\n        } else {\r\n            if (pieceInSelectedCell) {\r\n                updatePiece(pieceInSelectedCell.key, {...pieceInSelectedCell, col: col, row: row});\r\n                setSelectedCell([]);\r\n            } else {\r\n                setSelectedCell([row, col]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const imageInCell = pieceInCell ? <img key={pieceInCell.key} src={pieceInCell.image}/>\r\n        : <img/>;\r\n    return (\r\n        <div className={cellStyle} onClick={onSelected}>\r\n            {imageInCell}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BoardCell;\r\n","import React, {useState} from 'react'\r\nimport BoardCell from \"./BoardCell\";\r\n\r\nimport \"./Board.css\"\r\n\r\nconst Board = ({pieces, numRows, numColumns, updatePiece}) => {\r\n\r\n    const [selectedCell, setSelectedCell] = useState([]);\r\n\r\n    const board = Array(numRows).fill(Array(numColumns).fill(\"\"));\r\n    //const transposed = matrix.map((col, c) => matrix.map((row, r) => matrix[r][c]));\r\n\r\n    return (\r\n        <div className={\"grid\"}>\r\n            {board.map((row, r) => row.map((_, c) => {\r\n                const col = numColumns - c - 1;\r\n                return <BoardCell key={r*numColumns + c}\r\n                                  pieces={pieces} row={r} col={col}\r\n                                  selectedCell={selectedCell}\r\n                                  setSelectedCell={setSelectedCell}\r\n                                  updatePiece={updatePiece}\r\n                />\r\n            }\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Board;","import React, {useState} from 'react'\r\nimport Board from \"./Board\";\r\nimport BlackQueen from '../images/black_queen.svg'\r\nimport BlackKing from '../images/black_king.svg'\r\nimport BlackPawn from '../images/black_pawn.svg'\r\nimport BlackBishop from '../images/black_bishop.svg'\r\nimport BlackKnight from '../images/black_knight.svg'\r\nimport BlackRook from '../images/black_rook.svg'\r\nimport WhiteQueen from '../images/white_queen.svg'\r\nimport WhiteKing from '../images/white_king.svg'\r\nimport WhitePawn from '../images/white_pawn.svg'\r\nimport WhiteBishop from '../images/white_bishop.svg'\r\nimport WhiteKnight from '../images/white_knight.svg'\r\nimport WhiteRook from '../images/white_rook.svg'\r\n\r\nconst Chess = () => {\r\n    const [pieces, setPieces] = useState(standardChessPieces);\r\n\r\n    const updatePiece = (pieceKey, piece) => {\r\n        pieces[pieceKey] = piece;\r\n        setPieces(pieces);\r\n    };\r\n\r\n    return (\r\n        <Board numRows={rows} numColumns={cols} pieces={pieces} updatePiece={updatePiece}/>\r\n    )\r\n};\r\n\r\nconst rows = 8;\r\nconst cols = 8;\r\nconst standardChessPieces = {\r\n    \"WR1\": {key:\"WR1\", image: WhiteRook, row: 0, col: 0},\r\n    \"WN1\": {key:\"WN1\", image: WhiteKnight, row:0, col:1},\r\n    \"WB1\": {key:\"WB1\", image: WhiteBishop, row:0, col:2},\r\n    \"WQ\" : {key:\"WQ\", image: WhiteQueen, row:0, col:3},\r\n    \"WK\" : {key:\"WK\", image: WhiteKing, row:0, col:4},\r\n    \"WB2\": {key:\"WB2\", image: WhiteBishop, row:0, col:5},\r\n    \"WN2\": {key:\"WN2\", image: WhiteKnight, row:0, col:6},\r\n    \"WR2\": {key:\"WR2\", image: WhiteRook, row:0, col:7},\r\n\r\n    \"WP1\": {key:\"WP1\", image: WhitePawn, row: 1, col: 0},\r\n    \"WP2\": {key:\"WP2\", image: WhitePawn, row: 1, col: 1},\r\n    \"WP3\": {key:\"WP3\", image: WhitePawn, row: 1, col: 2},\r\n    \"WP4\": {key:\"WP4\", image: WhitePawn, row: 1, col: 3},\r\n    \"WP5\": {key:\"WP5\", image: WhitePawn, row: 1, col: 4},\r\n    \"WP6\": {key:\"WP6\", image: WhitePawn, row: 1, col: 5},\r\n    \"WP7\": {key:\"WP7\", image: WhitePawn, row: 1, col: 6},\r\n    \"WP8\": {key:\"WP8\", image: WhitePawn, row: 1, col: 7},\r\n\r\n    \"BR1\": {key:\"BR1\", image: BlackRook, row:7, col:0},\r\n    \"BN1\": {key:\"BN1\", image: BlackKnight, row:7, col:1},\r\n    \"BB1\": {key:\"BB1\", image: BlackBishop, row:7, col:2},\r\n    \"BQ\": {key:\"BQ\", image: BlackQueen, row:7, col:3},\r\n    \"BK\": {key:\"BK\", image: BlackKing, row:7, col:4},\r\n    \"BB2\": {key:\"BB2\", image:  BlackBishop, row:7, col:5},\r\n    \"BN2\": {key:\"BN2\", image: BlackKnight, row:7, col:6},\r\n    \"BR2\": {key:\"BR2\", image: BlackRook, row:7, col:7},\r\n\r\n    \"BP1\": {key:\"BP1\", image: BlackPawn, row: 6, col: 0},\r\n    \"BP2\": {key:\"BP2\", image: BlackPawn, row: 6, col: 1},\r\n    \"BP3\": {key:\"BP3\", image: BlackPawn, row: 6, col: 2},\r\n    \"BP4\": {key:\"BP4\", image: BlackPawn, row: 6, col: 3},\r\n    \"BP5\": {key:\"BP5\", image: BlackPawn, row: 6, col: 4},\r\n    \"BP6\": {key:\"BP6\", image: BlackPawn, row: 6, col: 5},\r\n    \"BP7\": {key:\"BP7\", image: BlackPawn, row: 6, col: 6},\r\n    \"BP8\": {key:\"BP8\", image: BlackPawn, row: 6, col: 7}\r\n};\r\n\r\nexport default Chess;\r\n","import React from 'react';\nimport './App.css';\nimport Chess from \"./components/Chess\";\n\nfunction App() {\n  return (\n      <Chess />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}