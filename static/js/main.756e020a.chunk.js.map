{"version":3,"sources":["images/black_queen.svg","images/black_king.svg","images/black_pawn.svg","images/black_bishop.svg","images/black_knight.svg","images/black_rook.svg","images/white_queen.svg","images/white_king.svg","images/white_pawn.svg","images/white_bishop.svg","images/white_knight.svg","images/white_rook.svg","components/BoardCell.js","components/Board.js","components/Chess.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Types","BLACK_QUEEN","name","image","BlackQueen","BLACK_KING","BlackKing","BLACK_PAWN","BlackPawn","BLACK_BISHOP","BlackBishop","BLACK_KNIGHT","BlackKnight","BLACK_ROOK","BlackRook","WHITE_QUEEN","WhiteQueen","WHITE_KING","WhiteKing","WHITE_PAWN","WhitePawn","WHITE_BISHOP","WhiteBishop","WHITE_KNIGHT","WhiteKnight","WHITE_ROOK","WhiteRook","BoardCell","pieces","row","col","piecesInCell","filter","p","cellStyle","className","map","piece","key","src","type","Board","numRows","numColumns","board","Array","fill","r","_","c","rows","cols","standardChessPieces","i","Chess","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.756e020a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black_queen.7b3e33e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_king.66e1bcad.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_pawn.1c52d8c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_bishop.1f3b8d1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_knight.d39f1d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/black_rook.96872a66.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_queen.4320a2dd.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_king.250510ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_pawn.d69014fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_bishop.09004fd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_knight.e6294efe.svg\";","module.exports = __webpack_public_path__ + \"static/media/white_rook.095b1a06.svg\";","import React from 'react'\r\n\r\nimport BlackQueen from '../images/black_queen.svg'\r\nimport BlackKing from '../images/black_king.svg'\r\nimport BlackPawn from '../images/black_pawn.svg'\r\nimport BlackBishop from '../images/black_bishop.svg'\r\nimport BlackKnight from '../images/black_knight.svg'\r\nimport BlackRook from '../images/black_rook.svg'\r\nimport WhiteQueen from '../images/white_queen.svg'\r\nimport WhiteKing from '../images/white_king.svg'\r\nimport WhitePawn from '../images/white_pawn.svg'\r\nimport WhiteBishop from '../images/white_bishop.svg'\r\nimport WhiteKnight from '../images/white_knight.svg'\r\nimport WhiteRook from '../images/white_rook.svg'\r\n\r\nimport './BoardCell.css';\r\n\r\nconst BoardCell = ({pieces, row, col}) => {\r\n\r\n    const piecesInCell = pieces.filter(p => p.row === row && p.col === col);\r\n    const cellStyle = \"cell \" + (row%2 === col%2 ? 'black-cell' : 'white-cell');\r\n\r\n    return (\r\n        <div className={cellStyle}>\r\n            {piecesInCell.map(piece => <img key={piece.key} src={piece.type.image}/>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const Types = {\r\n    BLACK_QUEEN: {name: 'BLACK_QUEEN', image: BlackQueen},\r\n    BLACK_KING: {name: 'BLACK_KING', image: BlackKing},\r\n    BLACK_PAWN: {name: 'BLACK_PAWN', image: BlackPawn},\r\n    BLACK_BISHOP: {name: 'BLACK_BISHOP', image: BlackBishop},\r\n    BLACK_KNIGHT: {name: 'BLACK_KNIGHT', image: BlackKnight},\r\n    BLACK_ROOK: {name: 'BLACK_ROOK', image: BlackRook},\r\n    WHITE_QUEEN: {name: 'WHITE_QUEEN', image: WhiteQueen},\r\n    WHITE_KING: {name: 'WHITE_KING', image: WhiteKing},\r\n    WHITE_PAWN: {name: 'WHITE_PAWN', image: WhitePawn},\r\n    WHITE_BISHOP: {name: 'WHITE_BISHOP', image: WhiteBishop},\r\n    WHITE_KNIGHT: {name: 'WHITE_KNIGHT', image: WhiteKnight},\r\n    WHITE_ROOK: {name: 'WHITE_ROOK', image: WhiteRook},\r\n};\r\n\r\nexport default BoardCell;\r\n","import React from 'react'\r\nimport BoardCell from \"./BoardCell\";\r\n\r\nimport \"./Board.css\"\r\n\r\nconst Board = ({pieces, numRows, numColumns}) => {\r\n\r\n    const board = Array(numRows).fill(Array(numColumns).fill(\"\"));\r\n    //const transposed = matrix.map((col, c) => matrix.map((row, r) => matrix[r][c]));\r\n\r\n    return (\r\n        <div className={\"grid\"}>\r\n            {board.map((row, r) => row.map((_, c) => {\r\n                const col = numColumns - c - 1;\r\n                return <BoardCell key={r*numColumns + c} pieces={pieces} row={r} col={col} />\r\n            }\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Board;","import React, {useState} from 'react'\r\nimport Board from \"./Board\";\r\nimport {Types} from \"./BoardCell\";\r\n\r\nconst Chess = () => {\r\n    const [pieces, setPieces] = useState(standardChessPieces);\r\n\r\n    return (\r\n        <Board numRows={rows} numColumns={cols} pieces={pieces}/>\r\n    )\r\n};\r\n\r\nconst rows = 8;\r\nconst cols = 8;\r\nconst standardChessPieces = [\r\n    {key: \"WR1\", type: Types.WHITE_ROOK, row: 0, col: 0},\r\n    {key:\"WN1\", type:Types.WHITE_KNIGHT, row:0, col:1},\r\n    {key:\"WB1\", type:Types.WHITE_BISHOP, row:0, col:2},\r\n    {key:\"WQ\", type:Types.WHITE_QUEEN, row:0, col:3},\r\n    {key:\"WK\", type:Types.WHITE_KING, row:0, col:4},\r\n    {key:\"WB2\", type:Types.WHITE_BISHOP, row:0, col:5},\r\n    {key:\"WN2\", type:Types.WHITE_KNIGHT, row:0, col:6},\r\n    {key:\"WR2\", type:Types.WHITE_ROOK, row:0, col:7},\r\n\r\n    ...Array(8).fill(0).map((_, i) =>\r\n        ({key:\"WP\"+i, type:Types.WHITE_PAWN, row: 1, col: i})),\r\n\r\n    {key:\"BR1\", type:Types.BLACK_ROOK, row:7, col:0},\r\n    {key:\"BN1\", type:Types.BLACK_KNIGHT, row:7, col:1},\r\n    {key:\"BB1\", type:Types.BLACK_BISHOP, row:7, col:2},\r\n    {key:\"BQ\", type:Types.BLACK_QUEEN, row:7, col:3},\r\n    {key:\"BK\", type:Types.BLACK_KING, row:7, col:4},\r\n    {key:\"BB2\", type:Types.BLACK_BISHOP, row:7, col:5},\r\n    {key:\"BN2\", type:Types.BLACK_KNIGHT, row:7, col:6},\r\n    {key:\"BR2\", type:Types.BLACK_ROOK, row:7, col:7},\r\n\r\n    ...Array(8).fill(0).map((_, i) =>\r\n        ({key:\"BP\"+i, type:Types.BLACK_PAWN, row: 6, col: i})),\r\n];\r\n\r\n\r\nexport default Chess;\r\n","import React from 'react';\nimport './App.css';\nimport Chess from \"./components/Chess\";\n\nfunction App() {\n  return (\n      <Chess />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}